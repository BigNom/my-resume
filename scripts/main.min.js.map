{"version":3,"sources":["perfmatters.js","main.js"],"names":["logCRP","t","window","performance","timing","dcl","domContentLoadedEventStart","domLoading","complete","domComplete","stats","document","getElementById","textContent","isLocalhost","Boolean","location","hostname","match","navigator","protocol","serviceWorker","register","then","registration","onupdatefound","controller","installingWorker","installing","onstatechange","state","Error","catch","e","console","error","addEventListener","event"],"mappings":"YAGA,SAASA,UACP,GAAIC,GAAIC,OAAOC,YAAYC,OACvBC,EAAMJ,EAAEK,2BAA6BL,EAAEM,WACvCC,EAAWP,EAAEQ,YAAcR,EAAEM,WAC7BG,EAAQC,SAASC,eAAe,YACpCF,GAAMG,YAAc,QAAUR,EAAM,eAAiBG,EAAW;;;;;;;;;;;;;;;;;;CCWlE,WAOE,GAAIM,GAAcC,QAAqC,cAA7Bb,OAAOc,SAASC,UAET,UAA7Bf,OAAOc,SAASC,UAEhBf,OAAOc,SAASC,SAASC,MACvB,0DAIF,kBAAmBC,aACW,WAA7BjB,OAAOc,SAASI,UAAyBN,IAC5CK,UAAUE,cAAcC,SAAS,qBAChCC,KAAK,SAASC,GAEbA,EAAaC,cAAgB,WAK3B,GAAIN,UAAUE,cAAcK,WAAY,CAGtC,GAAIC,GAAmBH,EAAaI,UAEpCD,GAAiBE,cAAgB,WAC/B,OAAQF,EAAiBG,OACvB,IAAK,YAKH,KAEF,KAAK,YACH,KAAM,IAAIC,OAAM,yDASzBC,MAAM,SAASC,GAChBC,QAAQC,MAAM,4CAA6CF,QD3DjE/B,OAAOkC,iBAAiB,OAAQ,SAASC,GACvCrC","file":"main.min.js","sourcesContent":["// Measuring the Critical Rendering Path with Navigation Timing\n// https://developers.google.com/web/fundamentals/performance/critical-rendering-path/measure-crp\n\nfunction logCRP() {\n  var t = window.performance.timing;\n  var dcl = t.domContentLoadedEventStart - t.domLoading;\n  var complete = t.domComplete - t.domLoading;\n  var stats = document.getElementById('crp-stats');\n  stats.textContent = 'DCL: ' + dcl + 'ms, onload: ' + complete + 'ms';\n}\n\nwindow.addEventListener('load', function(event) {\n  logCRP();\n});\n","/*!\n *\n *  Web Starter Kit\n *  Copyright 2015 Google Inc. All rights reserved.\n *\n *  Licensed under the Apache License, Version 2.0 (the \"License\");\n *  you may not use this file except in compliance with the License.\n *  You may obtain a copy of the License at\n *\n *    https://www.apache.org/licenses/LICENSE-2.0\n *\n *  Unless required by applicable law or agreed to in writing, software\n *  distributed under the License is distributed on an \"AS IS\" BASIS,\n *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *  See the License for the specific language governing permissions and\n *  limitations under the License\n *\n */\n/* eslint-env browser */\n(function() {\n  'use strict';\n\n  // Check to make sure service workers are supported in the current browser,\n  // and that the current page is accessed from a secure origin. Using a\n  // service worker from an insecure origin will trigger JS console errors. See\n  // http://www.chromium.org/Home/chromium-security/prefer-secure-origins-for-powerful-new-features\n  var isLocalhost = Boolean(window.location.hostname === 'localhost' ||\n      // [::1] is the IPv6 localhost address.\n      window.location.hostname === '[::1]' ||\n      // 127.0.0.1/8 is considered localhost for IPv4.\n      window.location.hostname.match(\n        /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n      )\n    );\n\n  if ('serviceWorker' in navigator &&\n      (window.location.protocol === 'https:' || isLocalhost)) {\n    navigator.serviceWorker.register('service-worker.js')\n    .then(function(registration) {\n      // updatefound is fired if service-worker.js changes.\n      registration.onupdatefound = function() {\n        // updatefound is also fired the very first time the SW is installed,\n        // and there's no need to prompt for a reload at that point.\n        // So check here to see if the page is already controlled,\n        // i.e. whether there's an existing service worker.\n        if (navigator.serviceWorker.controller) {\n          // The updatefound event implies that registration.installing is set:\n          // https://slightlyoff.github.io/ServiceWorker/spec/service_worker/index.html#service-worker-container-updatefound-event\n          var installingWorker = registration.installing;\n\n          installingWorker.onstatechange = function() {\n            switch (installingWorker.state) {\n              case 'installed':\n                // At this point, the old content will have been purged and the\n                // fresh content will have been added to the cache.\n                // It's the perfect time to display a \"New content is\n                // available; please refresh.\" message in the page's interface.\n                break;\n\n              case 'redundant':\n                throw new Error('The installing ' +\n                                'service worker became redundant.');\n\n              default:\n                // Ignore\n            }\n          };\n        }\n      };\n    }).catch(function(e) {\n      console.error('Error during service worker registration:', e);\n    });\n  }\n\n  // Your custom JavaScript goes here\n})();\n"]}